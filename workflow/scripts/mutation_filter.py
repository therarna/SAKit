import os,sys
import pandas as pd
from argparse import ArgumentParser
import subprocess

if __name__ == '__main__':
    parser = ArgumentParser(description="SNV/INDEL filter script")
    parser.add_argument("-q","--quantsf", required=True, help="quant file generated by salmon")
    parser.add_argument("-a","--annotvcf", required=True, help="vcf file annotated by snpeff and SnpSift")
    parser.add_argument("-p","--protfasta", required=True, help="fasta file of protein sequence")
    parser.add_argument("-t","--tpmcutoff", default=15, help="TPM value cutoff ")
    parser.add_argument("-o","--outpath", required=True, help="out path")
    
    args = parser.parse_args()
    quantsf = args.quantsf
    annotvcf = args.annotvcf
    protfasta = args.protfasta
    tpmcutoff = args.tpmcutoff
    outpath = args.outpath
    readslen = 150
    selectvcf = os.path.basename(annotvcf).split(".vcf")[0]+".filtered.vcf"
    selectprotfa = os.path.basename(protfasta).split(".fa")[0]+".filtered.fa"
    print(selectvcf)
    
    ## get the min sequence depth by caculating total normalized  READ COUNT ##
    pdf =  pd.read_table(quantsf,sep="\t",header=0)
    pdf["normal_reads"] = 1000*pdf["NumReads"]/pdf["EffectiveLength"]
    print((pdf["normal_reads"].sum()))
    depth_cutoff = 150*int(tpmcutoff)*(pdf["normal_reads"].sum())/(1000*1000000)
    
    ## select muation point ##
    
    cmd = '''
            tail -n+117 {annotvcf}|head -1 > {outpath}/{selectvcf}
            tail -n+118 {annotvcf} | awk -F'\t' '{{if ($3=="." && $7=="PASS") {{print $0}}}}' | sed 's/;LOF=/,LOF=/g' | sed 's/;NMD=/,NMD=/g' | sed 's/;/\t/g' | sed 's/VD=//g' |awk -F'\t' '{{if($11>= {depth_cutoff}) print $0 }}' | grep '{functype}' >> {outpath}/{selectvcf}
            '''.format(annotvcf = annotvcf,
                    depth_cutoff = depth_cutoff,
                    functype = "gene_fusion\|intron_variant\|inframe_deletion\|intron_variant\|exon_loss_variant\|frameshift_variant\|stop_lost",
                    outpath = outpath,
                    selectvcf = selectvcf)
    print(cmd)
    subprocess.run('/usr/bin/bash -c "$cmd"',shell=True,env={'cmd':cmd})
    
    cmd2 = """
            cat /dev/null > {outpath}/{selectprotfa}
            
            cut -f37 {outpath}/{selectvcf}| 
            cut -f1 |
            tr '|' "\n" |
            grep "ENST" |
            cut -f1 -d'.'|while read transcript;
            do
                grep -A1 "Variant" {outpath}/{protfa}|grep  -A1 ${{transcript}} |grep -A1 "HGVS.p:p." >> {outpath}/{selectprotfa}
            done
            """.format(outpath = outpath,
                       selectvcf = selectvcf,
                       protfa = protfasta,
                       selectprotfa = selectprotfa)
    print(cmd2)
    subprocess.run('/usr/bin/bash -c "$cmd"', shell=True,env={"cmd":cmd2})
            